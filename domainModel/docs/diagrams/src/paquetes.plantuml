@startuml tictactoe
namespace usantatecla.tictactoe {
class Board {
	- Token[][] tokens
	Board()
	+ void reset() 
	void write() 
	- Token getToken(Coordinate coordinate)
	boolean isCompleted()
	void put(Coordinate coordinate, Token token) 
	void move(Coordinate origin, Coordinate target) 
	- void remove(Coordinate coordinate) 
	boolean isOccupied(Coordinate coordinate, Token token) 
	boolean isEmpty(Coordinate coordinate)
	boolean isTicTacToe(Token token) 
	- List<Coordinate> getCoordinates(Token token) 
}

class Coordinate {
	{static} final Coordinate NULL
	{static} final int DIMENSION
	{static} final ClosedInterval LIMITS
	Coordinate()
	Coordinate(int row, int column)
	+ boolean isNull()
	+ Direction getDirection(usantatecla.utils.Coordinate coordinate) 
	+ boolean inInverseDiagonal()
	+ void read(String message)
	+ void random() 
	+ boolean equals(Object obj)
}

enum Error {

	NOT_EMPTY
	NOT_OWNER
	SAME_COORDINATES
	WRONG_COORDINATES
	NULL
	- String message
	Error()
	Error(String)
	void writeln()
}

class MachinePlayer {
	MachinePlayer(Token, Board)
	~ Coordinate getCoordinate(Message)
}

enum Message {
	TITTLE
	NUMBER_PLAYERS
	SEPARATOR
	VERTICAL_LINE_LEFT
	VERTICAL_LINE_CENTERED
	VERTICAL_LINE_RIGHT
	ENTER_COORDINATE_TO_PUT
	ENTER_COORDINATE_TO_REMOVE
	COORDINATE_TO_PUT
	COORDINATE_TO_REMOVE
	COORDINATE_TO_MOVE
	PLAYER_WIN
	RESUME
	- String message
	- Message(String)
	void write()
	void writeln()
	+ String toString()
}


abstract class Player {
	~ Board board
	~ Token token
	Player(Token, Board)
	void play()
	- void put()
	~ abstract Coordinate getCoordinate(Message)
	~ Error checkPutCoordinateError(Coordinate)
	- void move()
	~ Error checkMoveOriginCoordinateError(Coordinate)
	~ Error checkMoveTargetCoordinateError(Coordinate, Coordinate)
	void writeWinner()
	Token getToken()
}

class TicTacToe{
    - Board board
	- Turn turn
    TicTacToe()
	- void play()
    - void playGame()
	- boolean isResumedGame()
	+ static void main(String[])
}

enum Token {
	X_TOKEN
	Y_TOKEN
	NULL
    + boolean isNull()
    void write()
    {static} Token get(int)
}

class Turn {
	{static} final int NUMBER_PLAYERS
	- Player[] players
	- int active
	Turn(Board)
	void play()
	- Player getPlayer()
	void writeWinner()
	Token getToken()
}

class UserPlayer extends Player {
	UserPlayer(Token, Board)
	~ Coordinate getCoordinate(Message message)
	~ Error checkPutCoordinateError(Coordinate)
	~ Error checkMoveOriginCoordinateError(Coordinate)
	~ Error checkMoveTargetCoordinateError(Coordinate, Coordinate)
}

TicTacToe *-down-> Board
TicTacToe *-down-> Turn

Board .down.> Token
Turn .down.> Token
Player *-down-> Token
Turn *-down-> "2" Player
Board *-down-> Coordinate
Player <|-down- MachinePlayer
Coordinate .down.> Error
Player .down.> Error
Board .down.> Message
Player .down.> Message
TicTacToe .down.> Message
Turn .down.> Message

}

namespace usantatecla.utils {

interface Coordinate {
	boolean isNull();
	Direction getDirection(Coordinate)
	boolean inHorizontal(Coordinate)
	boolean inVertical(Coordinate)
	boolean inMainDiagonal()
}

class ConcreteCoordinate {
	~ int row;
	~ int column;
	{static} {final} String ROW
	{static} {final}  String COLUMN
	~ ConcreteCoordinate()
	~ ConcreteCoordinate(int, int)
	+ boolean isNull()
	+ Direction getDirection(Coordinate)
	+ boolean inHorizontal(Coordinate)
	+ boolean inVertical(Coordinate)
	+ boolean inMainDiagonal()
	~ void read(String)
	+ int getRow()
	+ int getColumn()
	+ int hashCode()
	+ boolean equals(Object)
	+ String toString()
}
class NullCoordinate {
	+ {static} NullCoordinate instance
	+ {static} Coordinate instance()
	+ boolean isNull()
	+ Direction getDirection(Coordinate)
	+ boolean inHorizontal(Coordinate)
	+ boolean inVertical(Coordinate)
	+ boolean inMainDiagonal()
	+ int hashCode()
	+ boolean equals(Object)
	+ String toString()
}

enum Direction {
	VERTICAL
	HORIZONTAL
	MAIN_DIAGONAL
	INVERSE_DIAGONAL
	NULL
}

class Console {
	+ static Console console
	+ static Console instance()
	- BufferedReader bufferedReader
	+ String readString(String)
	+ String readString()
	+ int readInt(String)
	+ char readChar(String)
	+ void writeln()
	+ void write(String)
	+ void write(int)
	+ void writeln(String)
	+ void writeln(int)
	+ void write(char)
	+ void writeError(String)
}

class ClosedInterval {
	- int min;
	- int max;
	+ ClosedInterval(int, int)
	+ boolean isIncluded(int)
	+ String toString()
}

class YesNoDialog {
	- static final char AFFIRMATIVE
	- static final char NEGATIVE
	- static final String SUFFIX
	- static final String MESSAGE
	- char answer;
	+ boolean read(String message)
	- boolean isAfirmative()
	- char getAnswer()
	- boolean isNegative()
}

class LimitedIntDialog {
	- {final} ClosedInterval LIMITS
	- {static} {final} String ERROR_MESSAGE
	+ LimitedIntDialog(int, int)
	+ int read(String)
}

Coordinate <|-down- ConcreteCoordinate
Coordinate <|-down- NullCoordinate

}

usantatecla.utils.ConcreteCoordinate <|-down- usantatecla.tictactoe.Coordinate

usantatecla.tictactoe.Coordinate .down.> usantatecla.utils.ClosedInterval
usantatecla.tictactoe.Token .down.> usantatecla.utils.ClosedInterval
usantatecla.utils.LimitedIntDialog .down.> usantatecla.utils.ClosedInterval


usantatecla.tictactoe.Error .down.> usantatecla.utils.Console
usantatecla.tictactoe.Message .down.> usantatecla.utils.Console
usantatecla.tictactoe.Token .down.> usantatecla.utils.Console
usantatecla.utils.ConcreteCoordinate .down.> usantatecla.utils.Console
usantatecla.utils.LimitedIntDialog .down.> usantatecla.utils.Console
usantatecla.utils.YesNoDialog .down.> usantatecla.utils.Console


usantatecla.tictactoe.Turn .down.> usantatecla.utils.LimitedIntDialog
usantatecla.tictactoe.TicTacToe .down.> usantatecla.utils.YesNoDialog

usantatecla.tictactoe.Board .down.> usantatecla.utils.Direction
usantatecla.tictactoe.Coordinate .down.> usantatecla.utils.Direction
usantatecla.utils.Coordinate .down.> usantatecla.utils.Direction
@enduml
