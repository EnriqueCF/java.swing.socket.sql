@startuml paqueteTicTacToe
class View as "tictactoe.views.\nView"
class Game as "tictactoe.models.\nGame"
class StartController as "tictactoe.controllers.\nStartController"
class PlayController as "tictactoe.controllers.\nPlayController"
class ResumeController as "tictactoe.controllers.\nResumeController"
class ConsoleView as "tictactoe.views.console.\nConsoleView"
class GraphicsView as "tictactoe.views.graphics.\nGraphicsView"

class  tictactoe.ConsoleTicTacToe{
  + {static} main(String[])
  # createView(StartController, PlayController, ResumeController): ConsoleView
}
tictactoe.TicTacToe <|-down- tictactoe.ConsoleTicTacToe
tictactoe.ConsoleTicTacToe .down.> StartController
tictactoe.ConsoleTicTacToe .down.> PlayController
tictactoe.ConsoleTicTacToe .down.> ResumeController
tictactoe.ConsoleTicTacToe .down.> ConsoleView

class  tictactoe.GraphicsTicTacToe{
  + {static} main(String[])
  # createView(StartController, PlayController, ResumeController): GraphicsView
}
tictactoe.TicTacToe <|-down- tictactoe.GraphicsTicTacToe
tictactoe.GraphicsTicTacToe .down.> StartController
tictactoe.GraphicsTicTacToe .down.> PlayController
tictactoe.GraphicsTicTacToe .down.> ResumeController
tictactoe.GraphicsTicTacToe .down.> GraphicsView

abstract class  tictactoe.TicTacToe{
  # TicTacToe()
  # {abstract} createView(StartController, PlayController, ResumeController): View
  # play()
}
tictactoe.TicTacToe *-down-> View
tictactoe.TicTacToe .down.> Game
tictactoe.TicTacToe .down.> StartController
tictactoe.TicTacToe .down.> PlayController
tictactoe.TicTacToe .down.> ResumeController
@enduml

@startuml paqueteTicTactoeViews
class Error as "tictactoe.types.\nError"
class StartController as "tictactoe.controllers.\nStartController"
class PlayController as "tictactoe.controllers.\nPlayController"
class ResumeController as "tictactoe.controllers.\nResumeController"
class Console as "usantatecla.utils.\nConsole"

abstract class  tictactoe.views.ErrorView{
  + {static} MESSAGES: String[]
  + ErrorView(Error)
}
tictactoe.views.ErrorView *-down-> Error

enum  tictactoe.views.Message{
  + TITTLE
  + NUMBER_PLAYERS
  + SEPARATOR
  + VERTICAL_LINE_LEFT
  + VERTICAL_LINE_CENTERED
  + VERTICAL_LINE_RIGHT
  + ENTER_COORDINATE_TO_PUT
  + ENTER_COORDINATE_TO_REMOVE
  + COORDINATE_TO_PUT
  + COORDINATE_TO_REMOVE
  + COORDINATE_TO_MOVE
  + PLAYER_WIN
  + RESUME
  - message: String
  - Message(String)
  + getMessage(): String
}

tictactoe.views.Message .down.> Console

abstract class tictactoe.views.View {
  + View(StartController, PlayController, ResumeController)
  + interact()
  # {abstract} start()
  # {abstract} play()
  # {abstract} isResumed(): boolean
}
tictactoe.views.View *-down-> StartController
tictactoe.views.View *-down-> PlayController
tictactoe.views.View *-down-> ResumeController

@enduml

@startuml paqueteTicTactoeViewsConsole
class Coordinate as "tictactoe.models.\nCoordinate"
class Token as "tictactoe.types.\nToken"
class Error as "tictactoe.types.\nError"
abstract class Controller as "tictactoe.controllers.\nController"
class StartController as "tictactoe.controllers.\nStartController"
class PlayController as "tictactoe.controllers.\nPlayController"
class ResumeController as "tictactoe.controllers.\nResumeController"
abstract class View as "tictactoe.views.\nView"
class Message as "tictactoe.views.\nMessage"
class ErrorView as "tictactoe.views.\nErrorView"
class Console as "usantatecla.utils.\nConsole"
class YesNoDialog as "usantatecla.utils.\nYesNoDialog"
class LimitedIntDialog as "usantatecla.utils.\nLimitedIntDialog"

class tictactoe.views.console.ConsoleView{
  + ConsoleView(StartController, PlayController, ResumeController)
  # start()
  # play()
  # isResumed(): boolean
}
tictactoe.views.console.ConsoleView -up-|> View
tictactoe.views.console.ConsoleView *-down-> tictactoe.views.console.StartView
tictactoe.views.console.ConsoleView *-down-> tictactoe.views.console.PlayView
tictactoe.views.console.ConsoleView *-down-> tictactoe.views.console.ResumeView

class tictactoe.views.console.CoordinateView {
  + CoordinateView(PlayController)
  + read(String): Coordinate
}
tictactoe.views.console.CoordinateView *-down-> PlayController
tictactoe.views.console.CoordinateView .down.> tictactoe.views.console.ErrorView
tictactoe.views.console.CoordinateView .down.> Console
tictactoe.views.console.CoordinateView .down.> Error
tictactoe.views.console.CoordinateView .down.> Coordinate

class  tictactoe.views.console.ErrorView{
  ~ ErrorView(Error)
  ~ writeln()
}
tictactoe.views.console.ErrorView .down.> Error
tictactoe.views.console.ErrorView .down.> Console
ErrorView <|-down- tictactoe.views.console.ErrorView

class  tictactoe.views.console.BoardView{
  ~ BoardView(Controller)
  ~ write()
}
tictactoe.views.console.BoardView *-down-> Controller
tictactoe.views.console.BoardView .down.> tictactoe.views.console.TokenView
tictactoe.views.console.BoardView .down.> Coordinate
tictactoe.views.console.BoardView .down.> Message
tictactoe.views.console.BoardView .down.> Console

class  tictactoe.views.console.PlayView{
  ~ PlayView(PlayController)
  ~ interact()
  - put()
  - move()
  + createRandomCoordinate(): Coordinate
}
tictactoe.views.console.PlayView *-down-> PlayController
tictactoe.views.console.PlayView .down.> tictactoe.views.console.BoardView
tictactoe.views.console.PlayView .down.> tictactoe.views.console.TokenView
tictactoe.views.console.PlayView .down.> tictactoe.views.console.CoordinateView
tictactoe.views.console.PlayView .down.> tictactoe.views.console.ErrorView
tictactoe.views.console.PlayView .down.> Coordinate
tictactoe.views.console.PlayView .down.> Message
tictactoe.views.console.PlayView .down.> Error
tictactoe.views.console.PlayView .down.> Console

class  tictactoe.views.console.ResumeView{
  + ResumeView(ResumeController)
  ~ interact(): boolean
}
tictactoe.views.console.ResumeView *-down-> ResumeController
tictactoe.views.console.ResumeView .down.> Message
tictactoe.views.console.ResumeView .down.> YesNoDialog

class tictactoe.views.console.StartView{
  ~ StartView(StartController)
  ~ interact()
}
tictactoe.views.console.StartView *-down-> StartController
tictactoe.views.console.StartView .down.> tictactoe.views.console.BoardView
tictactoe.views.console.StartView .down.> Message
tictactoe.views.console.StartView .down.> Console
tictactoe.views.console.StartView .down.> LimitedIntDialog

class tictactoe.views.console.TokenView{
  ~ TokenView(Token)
  ~ write()
}
tictactoe.views.console.TokenView *-down-> Token
tictactoe.views.console.TokenView .down.> Console

@enduml

@startuml paqueteTicTacToeViewsGraphics
class StartController as "tictactoe.controllers.\nStartController"
class PlayController as "tictactoe.controllers.\nPlayController"
class ResumeController as "tictactoe.controllers.\nResumeController"
abstract class View as "tictactoe.views.\nView"

class  tictactoe.views.graphics.GraphicsView{
  + GraphicsView(StartController, PlayController, ResumeController)
  # start()
  # play()
  # isResumed(): boolean
}
View <|-down- tictactoe.views.graphics.GraphicsView
tictactoe.views.graphics.GraphicsView .down.> StartController
tictactoe.views.graphics.GraphicsView .down.> PlayController
tictactoe.views.graphics.GraphicsView .down.> ResumeController
@enduml


@startuml paqueteTicTactoeModels
class Token as "tictactoe.types.\nToken"
class Error as "tictactoe.types.\nError"
class ClosedInterval as "usantatecla.utils.\nClosedInterval"
class ConcreteCoordinate as "usantatecla.utils.\nConcreteCoordinate"
class Direction as "usantatecla.utils.\nDirection"
interface Coordinate as "usantatecla.utils.\nCoordinate" 

class  tictactoe.models.Board{
  + Board()
  ~ reset()
  ~ getToken(Coordinate): Token
  ~ isCompleted(): boolean
  ~ put(Coordinate, Token)
  ~ move(Coordinate, Coordinate)
  - remove(Coordinate)
  ~ isOccupied(Coordinate, Token): boolean
  ~ isEmpty(Coordinate): boolean
  ~ isTicTacToe(Token): boolean
  - getCoordinates(Token): List<Coordinate>
}

tictactoe.models.Board *-down-> "*" Token
tictactoe.models.Board .down.> tictactoe.models.Coordinate
tictactoe.models.Board .down.> Direction

class  tictactoe.models.Coordinate{
  ~ {static} NULL_COORDINATE: Coordinate
  + {static} DIMENSION: int
  + Coordinate()
  + Coordinate(int, int)
  + isNull(): boolean
  + getDirection(Coordinate): Direction
  ~ inInverseDiagonal(): boolean
  + random()
  + equals(Object): boolean
}
ConcreteCoordinate <|-down- tictactoe.models.Coordinate
tictactoe.models.Coordinate .down.> Error
tictactoe.models.Coordinate .down.> Direction
tictactoe.models.Coordinate .down.> Coordinate
tictactoe.models.Coordinate .down.> ClosedInterval

class  tictactoe.models.Game{
  + Game()
  + reset()
  + setUsers(int)
  + isBoardComplete(): boolean
  + isUser(): boolean
  + put(Coordinate): Error
  + move(Coordinate, Coordinate): Error
  + next(Error)
  + isTicTacToe(): boolean
  + getToken(Coordinate): Token
  + getToken(): Token
  + getMaxPlayers(): int
}
tictactoe.models.Game *-down-> tictactoe.models.Board
tictactoe.models.Game *-down-> tictactoe.models.Turn
tictactoe.models.Game .down.> tictactoe.models.Coordinate
tictactoe.models.Game .down.> Error
tictactoe.models.Game .down.> Token

class  tictactoe.models.Player{
  ~ Player(Token, Board)
  ~ put(Coordinate): Error
  ~ move(Coordinate, Coordinate): Error
  ~ getToken(): Token
}
tictactoe.models.Player *-down-> Token
tictactoe.models.Player *-down-> tictactoe.models.Board
tictactoe.models.Player .down.> tictactoe.models.Coordinate
tictactoe.models.Player .down.> Error

class  tictactoe.models.Turn{
  + {static} NUMBER_PLAYERS: int
  - activePlayer: int
  - users: int
  ~ Turn(Board)
  ~ setUsers(int)
  ~ next()
  ~ isUser(): boolean
  ~ put(Coordinate): Error
  ~ getPlayer(): Player
  ~ move(Coordinate, Coordinate): Error
  ~ getToken(): Token
}

tictactoe.models.Turn *-down-> "*" tictactoe.models.Player
tictactoe.models.Turn *-down-> tictactoe.models.Board
tictactoe.models.Turn .down.-> Token
tictactoe.models.Turn .down.-> Error
tictactoe.models.Turn .down.-> tictactoe.models.Coordinate
@enduml

@startuml paqueteTypes
class ClosedInterval as "usantatecla.utils.\nClosedInterval"

enum  tictactoe.types.Error{
  + NOT_EMPTY
  + NOT_OWNER
  + SAME_COORDINATES
  + NOT_VALID
  + NULL
  + isNull(): boolean
}

enum  tictactoe.types.Token{
  + X
  + O
  + NULL
  + isNull(): boolean
  + {static} get(int): Token
  + toString(): String
}
tictactoe.types.Token .down.> ClosedInterval

@enduml

@startuml paqueteTicTactoeControllers
class Game as "tictactoe.models.\nGame"
class Coordinate as "tictactoe.models.\nCoordinate"
class Error as "tictactoe.types.\nError"
class Token as "tictactoe.types.\nToken"
class ClosedInterval as "usantatecla.utils.\nClosedInterval"

abstract class  tictactoe.controllers.Controller{
  ~ Controller(Game)
  + getToken(Coordinate): Token
}
tictactoe.controllers.Controller *-down-> Game
tictactoe.controllers.Controller .down.> Coordinate

class  tictactoe.controllers.PlayController{
  + PlayController(Game)
  + isBoardComplete(): boolean
  + isTicTacToe(): boolean
  + getToken(): Token
  + isUser(): boolean
  + isValidCoordiante(Coordinate): Error
  + put(Coordinate): Error
  + move(Coordinate,Coordinate): Error
}
tictactoe.controllers.Controller <|-down- tictactoe.controllers.PlayController
tictactoe.controllers.PlayController .down.> Coordinate
tictactoe.controllers.PlayController .down.> Error
tictactoe.controllers.PlayController .down.> Game
tictactoe.controllers.PlayController .down.> Token

class  tictactoe.controllers.ResumeController{
  + ResumeController(Game)
  + resume()
}
tictactoe.controllers.Controller <|-down- tictactoe.controllers.ResumeController
tictactoe.controllers.ResumeController .down.> Game

class  tictactoe.controllers.StartController{
  + StartController(Game)
  + setUsers(int)
  + getMaxPlayers(): int
}
tictactoe.controllers.Controller <|-down- tictactoe.controllers.StartController
tictactoe.controllers.StartController .down.> Game
@enduml

@startuml paqueteUtils

class BufferedReader as "java.io.BufferedReader"{}

class  usantatecla.utils.models.ClosedInterval{
  - min: int
  - max: int
  + ClosedInterval(int,int)
  + isIncluded(int): boolean
  + toString(): String
}

class usantatecla.utils.models.ConcreteCoordinate{
  # row: int
  # column: int
  - {static} ROW: String
  - {static} COLUMN: String
  # ConcreteCoordinate()
  # ConcreteCoordinate(int,int)
  + isNull(): boolean
  + getDirection(Coordinate): Direction
  + inHorizontal(Coordinate): boolean
  + inVertical(Coordinate): boolean
  + inMainDiagonal(): boolean
  # read(String)
  + getRow(): int
  + getColumn(): int
  + hashCode(): int
  + equals(Object): boolean
  + toString(): String
}

usantatecla.utils.models.Coordinate <|-down- usantatecla.utils.models.ConcreteCoordinate
usantatecla.utils.models.ConcreteCoordinate .down.> usantatecla.utils.models.Direction
usantatecla.utils.models.ConcreteCoordinate .down.> usantatecla.utils.views.Console


class usantatecla.utils.views.Console{
  - {static} console: Console
  + {static} instance(): Console
  - readString(String): String
  + readString(): String
  + readInt(String): int
  ~ readChar(String): char
  + writeln()
  + write(String)
  + write(int)
  + writeln(String)
  + writeln(int)
  + write(char)
  - writeError(String)
}
usantatecla.utils.views.Console *-down-> BufferedReader

interface usantatecla.utils.models.Coordinate{
  ~ isNull(): boolean
  ~ getDirection(Coordinate): Direction
  ~ inHorizontal(Coordinate): boolean
  ~ inVertical(Coordinate): boolean
  ~ inMainDiagonal(): boolean
}
usantatecla.utils.models.Coordinate .down.> usantatecla.utils.models.Direction

enum usantatecla.utils.models.Direction{
  VERTICAL
  HORIZONTAL
  MAIN_DIAGONAL
  INVERSE_DIAGONAL
  NULL
}

class usantatecla.utils.LimitedIntDialog{
  - LIMITS: ClosedInterval
  - {static} ERROR_MESSAGE: String
  + LimitedIntDialog(int,int)
  + read(String): int
}

usantatecla.utils.LimitedIntDialog *-down-> usantatecla.utils.models.ClosedInterval
usantatecla.utils.LimitedIntDialog .down.> usantatecla.utils.views.Console

class usantatecla.utils.models.NullCoordinate{
  - {static} instance: NullCoordinate
  + {static} instance(): Coordinate
  + isNull(): boolean
  + getDirection(Coordinate): Direction
  + inHorizontal(Coordinate): boolean
  + inVertical(Coordinate): boolean
  + inMainDiagonal(): boolean
  + hashCode(): int
  + equals(Object): boolean
  + toString(): String
}
usantatecla.utils.models.Coordinate <|-down- usantatecla.utils.models.NullCoordinate
usantatecla.utils.models.NullCoordinate .down.> usantatecla.utils.models.Direction

class usantatecla.utils.views.YesNoDialog{
  - {static} AFIRMATIVE: char
  - {static} NEGATIVE: char
  - {static} SUFFIX: String
  - {static} MESSAGE: String
  - answer: char
  + read(String): boolean
  - isAffirmative(): boolean
  - getAnswer(): char
  - isNegative(): boolean
}
usantatecla.utils.views.YesNoDialog .down.> usantatecla.utils.views.Console
@enduml
