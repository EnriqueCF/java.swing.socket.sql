@startuml tictactoe
class usantatecla.tictactoe.ConsoleTicTacToe {

	ConsoleTicTacToe()
	- play()
	+ {static} main(String[])

}

class usantatecla.tictactoe.GraphicsTicTacToe {

	- GraphicsTicTacToe()
	- play()
	+ {static} main(String[])

}

class  usantatecla.tictactoe.TicTacToe{
- game: Game
- view: View
# TicTacToe()
# {abstract} createView(Game): View
# play(): void
}

usantatecla.tictactoe.TicTacToe <|-down- usantatecla.tictactoe.ConsoleTicTacToe
usantatecla.tictactoe.TicTacToe <|-down- usantatecla.tictactoe.GraphicsTicTacToe

class Game as "usantatecla.models.Game"
class consoleView as "usantatecla.tictactoe.views.console.View"
class graphicsView as "usantatecla.tictactoe.views.graphics.View"

usantatecla.tictactoe.ConsoleTicTacToe *-down-> Game
usantatecla.tictactoe.GraphicsTicTacToe *-down-> Game
usantatecla.tictactoe.ConsoleTicTacToe *-down-> consoleView
usantatecla.tictactoe.GraphicsTicTacToe *-down-> graphicsView
@enduml

@startuml tictactoe.views
class usantatecla.tictactoe.views.ErrorView {

	+ {static} String[] MESSAGES

	+ ErrorView(Error)

}

enum usantatecla.tictactoe.views.Message {
    + TITTLE
	+ NUMBER_PLAYERS
	+ SEPARATOR
	+ VERTICAL_LINE_LEFT
	+ VERTICAL_LINE_CENTERED
	+ VERTICAL_LINE_RIGHT
	+ ENTER_COORDINATE_TO_PUT
	+ ENTER_COORDINATE_TO_REMOVE
	+ COORDINATE_TO_PUT
	+ COORDINATE_TO_REMOVE
	+ COORDINATE_TO_MOVE
	+ PLAYER_WIN
	+ RESUME
	- String message;

	- Message(String)
	+ String getMessage()
	+ write()
	+ writeln()
	+ String toString()

}

class usantatecla.tictactoe.views.View {

	+ View(Game)
	+ interact()
	# {abstract} start()
	# {abstract} play()
	# {abstract} boolean isNewGame()

}

class Game as "usantatecla.tictactoe.models.Game"
class Console as "usantatecla.utils.Console"
class Error as "usantatecla.tictactoe.models.Error"

usantatecla.tictactoe.views.ErrorView *--> Error
usantatecla.tictactoe.views.View *--> Game
usantatecla.tictactoe.views.Message ..> Console
@enduml

@startuml tictactoe.views.console
class usantatecla.tictactoe.views.console.CoordinateView {

    + Coordinate read(String)

}

usantatecla.tictactoe.views.console.CoordinateView ..> usantatecla.tictactoe.views.console.ErrorView

class Coordinate as "usantatecla.tictactoe.models.Coordinate"
class Error as "usantatecla.tictactoe.models.Error"
class Console as "usantatecla.utils.Console"

usantatecla.tictactoe.views.console.CoordinateView ..> Console
usantatecla.tictactoe.views.console.CoordinateView ..> Error
usantatecla.tictactoe.views.console.CoordinateView ..> Coordinate

class usantatecla.tictactoe.views.console.ErrorView {

	ErrorView(Error)
	writeln()

}

class ErrorView as "usantatecla.tictactoe.views.ErrorView"

ErrorView <|-- usantatecla.tictactoe.views.console.ErrorView
usantatecla.tictactoe.views.console.ErrorView ..> Console
usantatecla.tictactoe.views.console.ErrorView *--> Error

class usantatecla.tictactoe.views.console.GameView {

    GameView(Game)
	write()

}

class Game as "usantatecla.tictactoe.models.Game"
class Message as "usantatecla.tictactoe.views.Message"

usantatecla.tictactoe.views.console.GameView *--> Game
usantatecla.tictactoe.views.console.GameView ..> Coordinate
usantatecla.tictactoe.views.console.GameView ..> Message
usantatecla.tictactoe.views.console.GameView ..> usantatecla.tictactoe.views.console.TokenView

class usantatecla.tictactoe.views.console.SubView {

	SubView(Game)

}

usantatecla.tictactoe.views.console.SubView *--> Game

class usantatecla.tictactoe.views.console.PlayView {

    interact()
    - put()
    - move()

}

usantatecla.tictactoe.views.console.SubView <|-- usantatecla.tictactoe.views.console.PlayView
usantatecla.tictactoe.views.console.PlayView ..> Coordinate
usantatecla.tictactoe.views.console.PlayView ..> Message
usantatecla.tictactoe.views.console.PlayView ..> Error
usantatecla.tictactoe.views.console.PlayView ..> usantatecla.tictactoe.views.console.ErrorView
usantatecla.tictactoe.views.console.PlayView ..> usantatecla.tictactoe.views.console.CoordinateView
usantatecla.tictactoe.views.console.PlayView ..> usantatecla.tictactoe.views.console.GameView
usantatecla.tictactoe.views.console.PlayView ..> usantatecla.tictactoe.views.console.TokenView

class usantatecla.tictactoe.views.console.ResumeView {

	boolean interact()

}

class YesNoDialog as "usantatecla.utils.YesNoDialog"

usantatecla.tictactoe.views.console.SubView <|-- usantatecla.tictactoe.views.console.ResumeView
usantatecla.tictactoe.views.console.ResumeView ..> Message
usantatecla.tictactoe.views.console.ResumeView ..> YesNoDialog

class usantatecla.tictactoe.views.console.StartView {

	interact()

}

class LimitedIntDialog as "usantatecla.utils.LimitedIntDialog"

usantatecla.tictactoe.views.console.SubView <|-- usantatecla.tictactoe.views.console.StartView
usantatecla.tictactoe.views.console.StartView ..> Message
usantatecla.tictactoe.views.console.StartView ..> LimitedIntDialog
usantatecla.tictactoe.views.console.StartView ..> usantatecla.tictactoe.views.console.GameView

class usantatecla.tictactoe.views.console.TokenView {

	+ {static} char[] SYMBOLS

	TokenView(Token)
	write()

}

class Token as "usantatecla.tictactoe.models.Token"

usantatecla.tictactoe.views.console.TokenView *--> Token
usantatecla.tictactoe.views.console.TokenView ..> Console

class usantatecla.tictactoe.views.console.View {

	+ View(Game)

}

class View as "usantatecla.tictactoe.views.View"

View <|-- usantatecla.tictactoe.views.console.View
usantatecla.tictactoe.views.console.View *--> usantatecla.tictactoe.views.console.ResumeView
usantatecla.tictactoe.views.console.View *--> usantatecla.tictactoe.views.console.PlayView
usantatecla.tictactoe.views.console.View *--> usantatecla.tictactoe.views.console.StartView
@enduml

@startuml tictactoe.views.graphics
class Game as "usantatecla.mastermind.models.Game"{
    
}
class usantatecla.mastermind.views.graphics.AttemptsView{
    ~AttemptsView(int)
}

class usantatecla.mastermind.views.graphics.ColorView{
    ~ColorView()
    ~ColorView(Color)
    #resultInitials(int): String
}
class  usantatecla.mastermind.views.graphics.Constraints{
~ Constraints(int, int, int, int)
}

class  usantatecla.mastermind.views.graphics.GameView{
- {static} GAME_OVER: String
- secretCombinationView: SecretCombinationView
- proposedCombinationsView: ProposedCombinationsView
- proposalCombinationView: ProposalCombinationView
~ GameView()
- clear()  
~ start(Game)  
~ propose(Game): boolean
- proposeCombination(Game, int[]): int
- drawGameOver(Game): boolean
}

usantatecla.mastermind.views.graphics.GameView *-down-> usantatecla.mastermind.views.graphics.ProposedCombinationsView
usantatecla.mastermind.views.graphics.GameView *-down-> usantatecla.mastermind.views.graphics.SecretCombinationView
usantatecla.mastermind.views.graphics.GameView *-down-> usantatecla.mastermind.views.graphics.ProposalCombinationView
usantatecla.mastermind.views.graphics.GameView ..> Game
usantatecla.mastermind.views.graphics.GameView ..> usantatecla.mastermind.views.graphics.ProposedCombinationView
usantatecla.mastermind.views.graphics.GameView ..> usantatecla.mastermind.views.graphics.Constraints

class  usantatecla.mastermind.views.graphics.GraphicsView{
- gameView: GameView
+ GraphicsView(Game)
# start()  
# propose(): boolean
# isNewGame(): boolean
}
class View as "usantatecla.mastermind.views.View"{

}
View <|-down- usantatecla.mastermind.views.graphics.GraphicsView
usantatecla.mastermind.views.graphics.GraphicsView *-down-> usantatecla.mastermind.views.graphics.GameView
usantatecla.mastermind.views.graphics.GraphicsView ..> usantatecla.mastermind.views.graphics.ResumeDialog

class  usantatecla.mastermind.views.graphics.ProposalCombinationView{
- {static} ACCEPT: String
- label: JLabel
- textField: JTextField
- button: JButton
- characters: String
~ ProposalCombinationView(JRootPane)
+ keyPressed(KeyEvent)  
+ keyReleased(KeyEvent)  
+ keyTyped(KeyEvent)  
~ resetCharacters()  
~ getCharacters(): String
+ actionPerformed(ActionEvent)  
}
usantatecla.mastermind.views.graphics.ProposalCombinationView..> usantatecla.mastermind.views.graphics.Constraints

class  usantatecla.mastermind.views.graphics.ProposedCombinationsView{
- game: Game
~ ProposedCombinationsView(Game)
~ add()  
}

usantatecla.mastermind.views.graphics.ProposedCombinationsView ..> Game
usantatecla.mastermind.views.graphics.ProposedCombinationsView..> usantatecla.mastermind.views.graphics.Constraints
usantatecla.mastermind.views.graphics.ProposedCombinationsView ..> usantatecla.mastermind.views.graphics.TurnView
usantatecla.mastermind.views.graphics.ProposedCombinationsView..> usantatecla.mastermind.views.graphics.ProposedCombinationView
usantatecla.mastermind.views.graphics.ProposedCombinationsView..> usantatecla.mastermind.views.graphics.ResultView

class  usantatecla.mastermind.views.graphics.ProposedCombinationView{
- proposedCombinationView: ProposedCombinationView
- error: Error
~ ProposedCombinationView(ProposedCombinationView)
~ read(String)
+ isValid(): boolean
}
usantatecla.mastermind.views.graphics.ProposedCombinationView..> usantatecla.mastermind.views.graphics.ProposedCombinationView

class  usantatecla.mastermind.views.graphics.ResultView{
- result: Result
~ ResultView(Result)
}

class  usantatecla.mastermind.views.graphics.ResumeDialog{
- newGame: boolean
~ ResumeDialog()
~ isNewGame(): boolean
}

class  usantatecla.mastermind.views.graphics.SecretCombinationView{
- {static} TITLE: String
- title: JLabel
- secretCombination: JLabel
~ SecretCombinationView()
} 
usantatecla.mastermind.views.graphics.SecretCombinationView..> usantatecla.mastermind.views.graphics.Constraints

@enduml

@startuml tictactoe.models
class  tictactoe.models.Board{
- Token[][] tokens
~ Board()
~ reset()
~ Token getToken(Coordinate)
~ boolean isCompleted()
~ put(Coordinate, Token)
~ move(Coordinate, Coordinate)
- remove(Coordinate)
~ boolean isOccupied(Coordinate, Token)
~ boolean isEmpty(Coordinate)
~ boolean isTicTacToe(Token)
- List<Coordinate> getCoordinates(Token)
}

class ClosedInterval as "tictactoe.utils.ClosedInterval"
class ConcreteCoordinate as "tictactoe.utils.ConcreteCoordinate"
class Direction as "tictactoe.utils.Direction"

tictactoe.models.Board *-down-> tictactoe.models.Coordinate
tictactoe.models.Board ..> tictactoe.models.Token
tictactoe.models.Board ..> tictactoe.models.Turn
tictactoe.models.Board ..> Direction

class  tictactoe.models.Coordinate{
- {static} Coordinate NULL_COORDINATE
+ {static} int DIMENSION
- {static} ClosedInterval LIMITS
+ Coordinate()
+ Coordinate(int, int)
+ boolean isNull()
+ Error isValid()
+ Direction getDirection(Coordinate)
- boolean inInverseDiagonal()
+ random()
+ boolean equals(Object)
}
ConcreteCoordinate <|-down- tictactoe.models.Coordinate
tictactoe.models.Coordinate ..> tictactoe.models.Error
tictactoe.models.Coordinate ..> Direction
tictactoe.models.Coordinate ..> ClosedInterval

enum  tictactoe.models.Error{
NOT_EMPTY
NOT_OWNER
SAME_COORDINATES
WRONG_COORDINATES
NULL_ERROR
+ boolean isNull()
}

class  tictactoe.models.Game{
- Board board
- Turn turn
+ Game()
+ setUsers(int)
+ boolean isBoardComplete()
+ boolean isUser()
+ Error put(Coordinate)
+ Error move(Coordinate, Coordinate)
+ next()
+ boolean isTicTacToe()
+ Token getToken(Coordinate)
+ Token getToken()
+ int getMaxPlayers()
+ reset()
}
tictactoe.models.Game *-down-> tictactoe.models.Board
tictactoe.models.Game *-down-> tictactoe.models.Turn
tictactoe.models.Game ..> tictactoe.models.Coordinate
tictactoe.models.Game ..> tictactoe.models.Error

class  tictactoe.models.Player{
- Token token
- Board board
~ Player(Token, Board)
~ Error put(Coordinate)
~ Error move(Coordinate, Coordinate)
~ Token getToken()
}
tictactoe.models.Player *-down-> tictactoe.models.Token
tictactoe.models.Player *-down-> tictactoe.models.Board
tictactoe.models.Player ..> tictactoe.models.Coordinate
tictactoe.models.Player ..> tictactoe.models.Error

enum  tictactoe.models.Token{
X
O
NULL
+ boolean isNull()
~ {static} Token get(int)
}

tictactoe.models.Token ..> ClosedInterval

class  tictactoe.models.Turn{
- {static} int NUM_PLAYERS
- Player[] players
- Board board
- int active
- int users
~ Turn(Board)
~ setUsers(int)
~ next()
~ boolean isUser()
~ Error put(Coordinate)
- Player getPlayer()
~ Error move(Coordinate, Coordinate)
~ Token getToken()
}

tictactoe.models.Turn *-down-> tictactoe.models.Player
tictactoe.models.Turn ..down-> tictactoe.models.Board
tictactoe.models.Turn ..down-> tictactoe.models.Token
tictactoe.models.Turn ..down-> tictactoe.models.Coordinate
tictactoe.models.Turn ..down-> tictactoe.models.Error

@enduml