@startuml tictactoe
class  tictactoe.TicTacToe{
- game: Game
- view: View
~ TicTacToe()
- play(): void
+ main(String[]): void
}
tictactoe.TicTacToe *-down-> tictactoe.models.Game
tictactoe.TicTacToe *-down-> tictactoe.views.View
@enduml

@startuml tictactoe.views
class  tictactoe.views.CoordinateView{
+ read(String): Coordinate
}
utils.Console <..-down- tictactoe.views.CoordinateView
tictactoe.models.Coordinate <..-down- tictactoe.views.CoordinateView
tictactoe.views.CoordinateView ..> tictactoe.views.ErrorView

class  tictactoe.views.ErrorView{
- {static} MESSAGES: String[]
- error: Error
~ ErrorView(Error)
~ writeln()
}
utils.Console <..-down- tictactoe.views.ErrorView

class  tictactoe.views.GameView{
- game: Game
~ GameView(Game)
~ write()
}
utils.Message <..-down- tictactoe.views.GameView
tictactoe.views.GameView ..> tictactoe.models.Game
tictactoe.views.GameView ..> tictactoe.models.Coordinate
tictactoe.views.GameView ..> tictactoe.views.TokenView

enum  tictactoe.views.Message{
+ TITLE: Message
+ NUMBER_PLAYERS: Message 
+ SEPARATOR: Message
+ VERTICAL_LINE_LEFT: Message
+ VERTICAL_LINE_CENTERED: Message
+ VERTICAL_LINE_RIGHT: Message
+ ENTER_COORDINATE_TO_PUT: Message
+ ENTER_COORDINATE_TO_REMOVE: Message
+ COORDINATE_TO_PUT: Message
+ COORDINATE_TO_REMOVE: Message
+ COORDINATE_TO_MOVE: Message
+	PLAYER_WIN: Message
+ RESUME: Message
- message: String
- Message(String)
~ write(): void
~ writeln(): void
+ toString(): String
}
tictactoe.views.Message ..> utils.Console

class  tictactoe.views.PlayView{
~ PlayView(Game)
~ interact()
- put()
- move()
}
tictactoe.views.SubView <|-down- tictactoe.views.PlayView
tictactoe.views.PlayView ..> tictactoe.models.Game
tictactoe.views.PlayView ..> tictactoe.views.TokenView
tictactoe.views.PlayView ..> tictactoe.views.Message
tictactoe.views.PlayView ..> tictactoe.models.Coordinate
tictactoe.views.PlayView ..> tictactoe.views.CoordinateView
tictactoe.views.PlayView ..> tictactoe.views.ErrorView

class  tictactoe.views.ResumeView{
~ ResumeView(Game)
~ interact(): boolean

}
tictactoe.views.SubView <|-down- tictactoe.views.ResumeView
tictactoe.views.ResumeView ..> tictactoe.models.Game
tictactoe.views.ResumeView ..> tictactoe.views.Message

class tictactoe.views.StartView{
~ StartView(Game)
~ interact()
}
tictactoe.views.SubView <|-down- tictactoe.views.StartView
tictactoe.views.StartView ..> tictactoe.models.Game
tictactoe.views.StartView ..> tictactoe.views.GameView
tictactoe.views.StartView ..> utils.LimitedIntDialog
tictactoe.views.StartView ..> tictactoe.views.Message

class tictactoe.views.SubView{
# game: Game
~ SubView(Game)
}

tictactoe.views.SubView ..> tictactoe.models.Game

class tictactoe.views.TokenView{
- {static} SYMBOLS: char
- token: Token
~ TokenView(Token)
~ write()
}
tictactoe.views.TokenView ..> tictactoe.models.Token
tictactoe.views.TokenView ..> utils.Console

class  tictactoe.views.View{
- game: Game
- startView: StartView
- playView: PlayView
- resumeView: ResumeView
+ View(Game)
+ interact()
}
tictactoe.views.View *-down-> tictactoe.models.Game
tictactoe.views.View *-down-> tictactoe.views.StartView
tictactoe.views.View *-down-> tictactoe.views.PlayView
tictactoe.views.View *-down-> tictactoe.views.ResumeView
@enduml

@startuml tictactoe.models
class  tictactoe.models.Board{
- tokens: Token[][]
~ Board()
~ reset()
~ getToken(Coordinate): Token
~ isCompleted(): boolean
~ put(Coordinate, Token)
~ move(Coordinate, Coordinate)
- remove(Coordinate)
~ isOccupied(Coordinate, Token): boolean
~ isEmpty(Coordinate): boolean
~ isTicTacToe(Token): boolean
- getCoordinates(Token): List<Coordinate>
}
tictactoe.models.Board *-down-> tictactoe.models.Coordinate
tictactoe.models.Board ..> tictactoe.models.Token
tictactoe.models.Board ..> tictactoe.models.Turn
tictactoe.models.Board ..> utils.Direction

class  tictactoe.models.Coordinate{
- {static} NULL_COORDINATE; Coordinate
+ {static} DIMENSION: int
- {static} LIMITS: ClosedInterval
+ Coordinate()
+ Coordinate(int, int)
+ isNull(): boolean
+ isValid(): Error
+ getDirection(Coordinate): Direction
- inInverseDiagonal(): boolean
+ random()
+ equals(Object): boolean
}
utils.ConcreteCoordinate <|-down- tictactoe.models.Coordinate
tictactoe.models.Coordinate ..> tictactoe.models.Error
tictactoe.models.Coordinate ..> utils.Direction
tictactoe.models.Coordinate ..> utils.ClosedInterval
tictactoe.models.Coordinate ..> java.util.Random

enum  tictactoe.models.Error{
NOT_EMPTY
NOT_OWNER
SAME_COORDINATES
WRONG_COORDINATES
NULL_ERROR
+ isNull(): boolean
}

class  tictactoe.models.Game{
- board: Board
- turn: Turn
+ Game()
+ setUsers(int)
+ isBoardComplete(): boolean
+ isUser(): boolean
+ put(Coordinate): Error
+ move(Coordinate, Coordinate): Error
+ next()
+ isTicTacToe(): boolean
+ getToken(Coordinate): Token
+ getToken(): Token
+ getMaxPlayers(): int
+ reset()
}
tictactoe.models.Game *-down-> tictactoe.models.Board
tictactoe.models.Game *-down-> tictactoe.models.Turn
tictactoe.models.Game ..> tictactoe.models.Coordinate
tictactoe.models.Game ..> tictactoe.models.Error

class  tictactoe.models.Player{
- token: Token
- board: Board
~ Player(Token, Board)
~ put(Coordinate): Error
~ move(Coordinate, Coordinate): Error
~ getToken(): Token
}
tictactoe.models.Player *-down-> tictactoe.models.Token
tictactoe.models.Player *-down-> tictactoe.models.Board
tictactoe.models.Player ..> tictactoe.models.Coordinate
tictactoe.models.Player ..> tictactoe.models.Error

enum  tictactoe.models.Token{
X
O
NULL
+ isNull(): boolean
~ {static} get(int): Token
}

tictactoe.models.Token ..> utils.ClosedInterval

class  tictactoe.models.Turn{
~ {static} NUM_PLAYERS: int
- players: Player[]
- board: Board
- active: int
- users: int
~ Turn(Board)
~ setUsers(int)
~ next()
~ isUser(): boolean
~ put(Coordinate): Error
- getPlayer(): Player
~ move(Coordinate, Coordinate): Error
~ getToken(): Token
}

tictactoe.models.Turn *-down-> tictactoe.models.Player
tictactoe.models.Turn ..down-> tictactoe.models.Board
tictactoe.models.Turn ..down-> tictactoe.models.Token
tictactoe.models.Turn ..down-> tictactoe.models.Coordinate
tictactoe.models.Turn ..down-> tictactoe.models.Error

@enduml

@startuml tictactoe.utils
class  utils.ClosedInterval{
- min: int
- max: int
+ ClosedInterval(int,int)
+ isIncluded(int): boolean
+ toString(): String
}

class  utils.ConcreteCoordinate{
# row: int
# column: int
- {static} ROW: String
- {static} COLUMN: String
# ConcreteCoordinate()
# ConcreteCoordinate(int,int)
+ isNull(): boolean
+ getDirection(Coordinate): Direction
+ inHorizontal(Coordinate): boolean
+ inVertical(Coordinate): boolean
+ inMainDiagonal(): boolean
# read(String)
+ getRow(): int
+ getColumn(): int
+ hashCode(): int
+ equals(Object): boolean
+ toString(): String
}

utils.Coordinate <|..down- utils.ConcreteCoordinate
utils.ConcreteCoordinate ..> utils.Direction

class  utils.Console{
- {static} console: Console
- bufferedReader: BufferedReader
+ {static} instance(): Console
- readString(String): String
+ readString(): String
+ readInt(String): int
~ readChar(String): char
+ writeln()
+ write(String)
+ write(int)
+ writeln(String)
+ writeln(int)
+ write(char)
- writeError(String)
}
utils.Console *-down-> java.io.BufferedReader

interface  utils.Coordinate{
~ isNull(): boolean
~ getDirection(Coordinate): Direction
~ inHorizontal(Coordinate): boolean
~ inVertical(Coordinate): boolean
~ inMainDiagonal(): boolean
}
utils.Coordinate ..> utils.Direction

enum  utils.Direction{
  VERTICAL
  HORIZONTAL
  MAIN_DIAGONAL
  INVERSE_DIAGONAL
  NULL
}

class  utils.LimitedIntDialog{
- LIMITS: ClosedInterval
- {static} ERROR_MESSAGE: String
+ LimitedIntDialog(int,int)
+ read(String): int
}

utils.LimitedIntDialog *-down-> utils.ClosedInterval
utils.LimitedIntDialog ..> utils.Console

class  utils.NullCoordinate{
- {static} instance: NullCoordinate
+ {static} instance(): Coordinate
+ isNull(): boolean
+ getDirection(Coordinate): Direction
+ inHorizontal(Coordinate): boolean
+ inVertical(Coordinate): boolean
+ inMainDiagonal(): boolean
+ hashCode(): int
+ equals(Object): boolean
+ toString(): String
}
utils.Coordinate <|..down- utils.NullCoordinate
utils.NullCoordinate ..> utils.Direction

class  utils.YesNoDialog{
- {static} AFIRMATIVE: char
- {static} NEGATIVE: char
- {static} SUFFIX: String
- {static} MESSAGE: String
- answer: char
+ read(String): boolean
- isAffirmative(): boolean
- getAnswer(): char
- isNegative(): boolean
}

@enduml
